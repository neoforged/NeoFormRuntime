buildscript {
    dependencies {
        // Fix for the shadow plugin using outdated ASM
        classpath 'org.ow2.asm:asm:9.5'
        classpath 'org.ow2.asm:asm-commons:9.5'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version '8.1.1'
    id "net.neoforged.gradleutils" version "3.0.0"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8"
}

group = 'net.neoforged'
base {
    archivesName = "neoform-runtime"
}
gradleutils.version {
    branches.suffixBranch()
}
project.version = gradleutils.version

changelog {
    from '0.1'
    // For fine-grained changelog publication control
    disableAutomaticPublicationRegistration()
}

repositories {
    mavenCentral()

    exclusiveContent {
        forRepository {
            maven {
                name = "Fabric"
                url = "https://maven.fabricmc.net/"
            }
        }
        filter {
            includeModule("net.fabricmc", "fabric-loom-native")
        }
    }
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile).configureEach() {
    options.encoding = "UTF-8"
}

def mainClassName = 'net.neoforged.neoform.runtime.cli.Main'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) project.components.getByName("java")

configurations {
    changelog {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "changelog"))
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    externalTools {
        canBeConsumed = true
        canBeResolved = false
        // NFRT generally ignores transitive dependencies when downloading tools, so we should too
        transitive = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability "net.neoforged:neoform-runtime-external-tools:${project.version}"
        }
        components.java.addVariantsFromConfiguration(it) {}
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.1.0'
    implementation 'info.picocli:picocli:4.7.6'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.eclipse.jdt:ecj:3.37.0'
    implementation 'net.fabricmc:fabric-loom-native:0.2.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.6'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
}

// Add dependencies to external tools
var toolVersions = new java.util.Properties()
file("src/main/resources/tools.properties").withInputStream {
    toolVersions.load(it)
}
for (var toolDependency : toolVersions.values()) {
    dependencies {
        externalTools(toolDependency)
    }
}

artifacts {
    // Only publish a changelog for releases
    changelog(createChangelog.outputFile) {
        builtBy(createChangelog)
        setClassifier("changelog")
        setExtension("txt")
    }
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven gradleutils.publishingMaven
    }
}

/**
 * Convenience IDE runs for IntelliJ for testing purposes.
 */

import org.jetbrains.gradle.ext.Application;

idea {
    project {
        settings {
            runConfigurations {
                "Show Help"(Application) {
                    mainClass = mainClassName
                    programParameters = "--help"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoforge 1.21 (joined) + Parchment"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoforge net.neoforged:neoforge:21.0.0-beta:userdev --add-repository=https://maven.parchmentmc.org --parchment-data=org.parchmentmc.data:parchment-1.21:2024.06.23@zip --parchment-conflict-prefix=p_ --write-result=compiled:build/minecraft-1.21.jar --write-result=clientResources:build/client-extra-1.21.jar --write-result=sources:build/minecraft-sources-1.21.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoforge 1.21 (joined)"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoforge net.neoforged:neoforge:21.0.0-beta:userdev --write-result=compiled:build/minecraft.jar --write-result=clientResources:build/client-extra.jar --write-result=sources:build/minecraft-sources.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoform 1.21 (joined)"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoform net.neoforged:neoform:1.21-20240613.152323@zip --write-result=compiled:build/minecraft.jar --write-result=clientResources:build/client-extra.jar --write-result=sources:build/minecraft-sources.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoforge 1.20.6 (joined) + Parchment"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoforge net.neoforged:neoforge:20.6.72-beta:userdev --add-repository=https://maven.parchmentmc.org --parchment-data=org.parchmentmc.data:parchment-1.20.6:2024.05.01:checked@zip --write-result=compiled:build/minecraft.jar --write-result=clientResources:build/client-extra.jar --write-result=sources:build/minecraft-sources.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoforge 1.20.6 (joined)"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoforge net.neoforged:neoforge:20.6.72-beta:userdev --write-result=compiled:build/minecraft.jar --write-result=clientResources:build/client-extra.jar --write-result=sources:build/minecraft-sources.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoform 1.20.6 (joined)"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoform net.neoforged:neoform:1.20.6-20240429.153634@zip --write-result=compiled:build/minecraft.jar --write-result=clientResources:build/client-extra.jar --write-result=sources:build/minecraft-sources.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run Neoform 1.19.2 (joined)"(Application) {
                    mainClass = mainClassName
                    programParameters = "run --dist joined --neoform de.oceanlabs.mcp:mcp_config:1.19.2@zip --write-result=compiled:build/minecraft.jar --write-result=clientResources:build/client-extra.jar --write-result=sources:build/minecraft-sources.jar"
                    moduleRef(project, sourceSets.main)
                }
                "Run clean-cache"(Application) {
                    mainClass = mainClassName
                    programParameters = "clean-cache --verbose"
                    moduleRef(project, sourceSets.main)
                }
                "Run cache-maintenance"(Application) {
                    mainClass = mainClassName
                    programParameters = "cache-maintenance --verbose"
                    moduleRef(project, sourceSets.main)
                }
                "Download assets 1.20.6"(Application) {
                    mainClass = mainClassName
                    programParameters = "download-assets --neoforge net.neoforged:neoforge:20.6.72-beta:userdev --output-properties-to build/assets.properties"
                    moduleRef(project, sourceSets.main)
                }
            }
        }
    }
}
